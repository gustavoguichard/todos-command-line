#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'todo'
rescue LoadError
  warn 'In development, you need to use `bundle exec bin/todo` to run your app'
  warn 'At install-time, RubyGems will make sure lib, etc. are in the load path'
  warn 'Feel free to remove this message from bin/todo now'
  exit 64
end

TODO_FILE = 'todos.txt'

def read_todos(filename)
  todos = []
  File.open(filename, 'r') do |file|
    counter = 1
    file.readlines.each do |line|
      name, created, completed = read_todo line
      complete_flag = completed ? 'DONE' : 'INCOMPLETE'
      todos << { index: counter, name: name, complete: complete_flag, created_at: created, completed_at: completed }
      counter += 1
    end
  end
  todos
end

def read_todo(line)
  line.chomp.split(/,/)
end

def write_todo(file, name, created = Time.now, completed = '')
  file.puts "#{name},#{created},#{completed}"
end

class App
  extend GLI::App

  # program_desc 'Describe your application here'

  version Todo::VERSION

  subcommand_option_handling :normal
  # arguments :strict

  # desc 'Describe some switch here'
  # switch %i[s switch]

  desc 'File to save the todos'
  default_value TODO_FILE
  arg_name 'Filename'
  flag %i[filename f]

  desc 'Creates new todos'
  arg_name '"A todo" "Another todo"'
  command :new do |c|
    # c.desc 'Describe a switch to new'
    c.flag :priority
    c.switch :f

    # c.desc 'Describe a flag to new'
    # c.default_value 'default'
    c.action do |global_options, _options, args|
      filename = global_options[:file_name] || TODO_FILE
      File.open(filename, 'a') do |file|
        args.each do |new_task|
          write_todo(file, new_task)
        end
        puts 'Tasks added.'
      end
    end
  end

  desc 'List tasks'
  command :list do |c|
    c.desc 'Format of the output'
    c.arg_name 'csv|pretty'
    c.default_value 'pretty'
    c.flag :format

    c.flag :s

    c.action do |global_options, options|
      filename = global_options[:file_name] || TODO_FILE
      todos = read_todos(filename)
      todos = todos.sort { |a, b| a[:name] <=> b[:name] } if options[:s] == 'name'
      todos.each do |todo|
        if options[:format] == 'pretty'
          printf("%3d - %s\n", todo[:index], todo[:name])
          printf("        Created: %s\n", todo[:created_at])
          printf("        Completed: %s\n", todo[:completed_at]) unless todo[:completed_at].nil?
        else
          puts [todo[:index], todo[:name], todo[:complete], todo[:created_at], todo[:completed_at]].join(',')
        end
      end
    end
  end

  # desc 'Describe done here'
  # arg_name 'Describe arguments to done here'
  command :done do |c|
    c.action do |global_options, _options, args|
      filename = global_options[:file_name] || TODO_FILE
      File.open(filename, 'r') do |file|
        File.open("#{filename}.new", 'w') do |new_file|
          counter = 1
          file.readlines.each do |line|
            name, created, completed = read_todo line
            if args.include? counter.to_s
              if completed.nil?
                write_todo(new_file, name, created, Time.now)
                puts "Task #{counter} completed"
              else
                write_todo(new_file, name, created)
                puts 'Task undone'
              end
            else
              write_todo(new_file, name, created, completed)
            end
            counter += 1
          end
        end
      end

      `mv #{filename}.new #{filename}`
    end
  end

  pre do |_global, _command, _options, _args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |_exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
