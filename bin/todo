#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'
require 'todo'

def read_todos(filename)
  todos = []
  File.open(filename, 'r') do |file|
    counter = 1
    file.readlines.each do |line|
      name, created, completed = read_todo line
      complete_flag = completed ? 'DONE' : 'INCOMPLETE'
      todos << { index: counter, name: name, complete: complete_flag, created_at: created, completed_at: completed }
      counter += 1
    end
  end
  todos
end

def read_todo(line)
  line.chomp.split(/,/)
end

def write_todo(file, name, created = Time.now, completed = '')
  file.puts "#{name},#{created},#{completed}"
end

class App
  extend GLI::App

  program_desc 'Manage a Todo list in your terminal'

  version Todo::VERSION

  subcommand_option_handling :normal

  desc 'File to save the todos'
  default_value Todo::FileUtils::TODO_FILE
  arg_name 'Filename'
  flag %i[filename f]

  desc 'Creates new todos'
  arg_name '"A todo" "Another todo"'
  command :new do |c|
    c.flag :priority
    c.switch :f

    c.action do |global_options, _options, args|
      todos = Todos.new(global_options[:file_name])
      todos.new_task(*args)
    end
  end

  desc 'List tasks'
  command :list do |c|
    c.desc 'Format of the output'
    c.arg_name 'csv|pretty'
    c.default_value 'pretty'
    c.flag :format

    c.flag :s

    c.action do |global_options, options|
      todos = Todos.new(global_options[:file_name])
      todos.list(options)
    end
  end

  # desc 'Describe done here'
  # arg_name 'Describe arguments to done here'
  command :done do |c|
    c.action do |global_options, _options, args|
      todos = Todos.new(global_options[:file_name])
      todos.done(*args)
    end
  end

  pre do |_global, _command, _options, _args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |_exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
